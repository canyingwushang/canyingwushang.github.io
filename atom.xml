<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[残影无伤]]></title>
  <link href="http://canyingwushang.github.io/atom.xml" rel="self"/>
  <link href="http://canyingwushang.github.io/"/>
  <updated>2015-01-19T14:07:38+08:00</updated>
  <id>http://canyingwushang.github.io/</id>
  <author>
    <name><![CDATA[残影无伤·张超]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C的方法签名问题]]></title>
    <link href="http://canyingwushang.github.io/blog/2015/01/11/iosde-fang-fa-qian-ming-wen-ti/"/>
    <updated>2015-01-11T17:56:46+08:00</updated>
    <id>http://canyingwushang.github.io/blog/2015/01/11/iosde-fang-fa-qian-ming-wen-ti</id>
    <content type="html"><![CDATA[<p><br>
最近在日常开发中经常会使用这样的代码处理流程：<br>
1. 根据字串获取对应的Selector<br>
2. 根据Selector使用<b>instanceMethodSignatureForSelector</b>方法获取指定方法签名<br>
3. 根据方法签名从集合中获取方法实参，再使用NSInvocation的invoke方法触发指定方法调用</p>

<p>起初，按照笔者的理解是Objective-C所有方法都应该有自己的方法签名，但实际上这种理解却让笔者踩到了坑里。
<br>为何呢？请看下面的例子:</p>

<pre><code>SEL selector1 = @selector(initWithBytes:length:encoding:);    
NSLog(@"%@", [NSString instanceMethodSignatureForSelector:selector1]);    
NSLog(@"%@", [[NSString new] methodSignatureForSelector:selector1]); 
</code></pre>

<p>上面的代码会是怎样的输出呢？<br>答案出乎笔者之前的意料，两个输出都是 <b>null</b> .<br></p>

<p>系统提供的函数怎么会没有函数签名呢？！！平常写代码的时候我们是可以正常调用的呢。顿时一头雾水。。。</p>

<p>为了一探究竟,笔者又尝试打印了下NSString的实例方法respondsToSelector的返回值，结果是NO。意思就是NSString的实例不能响应这个消息。随即看了下respondsToSelector的官方文档，但却有这样一句话：</p>

<pre><code>Note that if the receiver is able to forward aSelector messages to another object, it   will be able to respond to the message, albeit indirectly, even though this method  returns NO.
</code></pre>

<p>翻译一下：如果the receiver能通过消息转发的机制把自己无法响应的消息转给另外一个对象，那么我们仍然认为the receiver是可以响应该消息的，间接响应。但是，respondsToSelector依旧返回NO。</p>

<p>看到这里，笔者心里貌似有了思路了，难道initWithBytes:length:encoding:是通过消息转发实现的？
首先解释下什么是Message Forward。<br>
<img src="http://canyingwushang.github.io/images/20150110-iosmethodsignature.png" title="Optional title" alt="Alt text" /></p>

<p>有1个函数值的我们注意：<b> forwardInvocation: </b>. 这里完整解释下OC消息处理的整个过程，如下：<br><br></p>

<pre><code>消息转发分为两大阶段。第一阶段先征询接收者，所属的类，看其是否能动态添加方法，以处理当前这个“未知的选择    子”（unknown selector），这叫做“动态方法解析”（dynamic method resolution）。第二阶段涉及“完整的    消息转发机制”（full forwarding mechanism）。如果运行期系统已经把第一阶段执行完了，那么接收者自己就    无法再以动态新增方法的手段来响应包含该选择子的消息了。此时，运行期系统会请求接收者以其他手段来处理与消息    相关的方法调用。这又细分为两小步。首先，请接收者看看有没有其他对象能处理这条消息。若有，则运行期系统会把    消息转给那个对象，于是消息转发过程结束，一切如常。若没有“备援的接收者”（replacement receiver），则启 动完整的消息转发机制，运行期系统会把与消息有关的全部细节都封装到NSInvocation对象中，再给接收者最后一次 机会，令其设法解决当前还未处理的这条消息。如果还是不能处理该方法，最后会抛出大家很熟悉的异常  NSInvalidArgumentException，具体为unrecognized selector sent to instance xxxx.
</code></pre>

<p>那么上面提到的函数则是处于第二阶段第二步，那好办了，我们可以在NSString的forwardInvocation：方法上打一个符号断点，看看到底能不能断下来。</p>

<p>打符号断点的方法有很多种，笔者这里比较喜欢使用最简单的方法：<br></p>

<pre><code>bmessage -[NSString forwardInvocation:]
</code></pre>

<p>执行完成上述lldb的命令后，会有如下输出：</p>

<pre><code>Setting a breakpoint at -[NSObject forwardInvocation:] with condition   (void*)object_getClass((id)$rdi) == 0x000000010b377e90
Breakpoint 2: where = libobjc.A.dylib`-[NSObject forwardInvocation:], address =     0x000000010b4da2ea
</code></pre>

<p>其实就跟我们使用XCode提供的<b>Add Symbolic Exception</b>添加一个条件断点没啥区别。<br></p>

<p>bmessage是啥呢？请参考Facebook开源的LLDB命令扩展 <b><a href="https://github.com/facebook/chisel" title="Facebooks's collection of LLDB commands">Chisel</a></b> . 另外在objc.io的站点文章里上也有对bmessage更为详细的解释，具体可参考中文翻译文章<a href="http://objccn.io/issue-19-2/">与调试器共舞 - LLDB 的华尔兹</a>.</p>

<p>此时，断点已搞好，重新运行文初的代码，结果。。。。<b>没有断下来!!!</b>. 纳尼？难道我们的判断出错了，难道不是走的NSString的消息转发机制？一时间有陷入了迷茫中。。。</p>

<p>我靠，就这么玩意儿，这么常用，Apple还搞得这么神奇，不厚道啊！</p>

<p>那咋办呢？不搞清除，心里难受啊。能猜的都猜了，只剩一个方法了：<b>逆向</b>.
不入虎穴焉得虎子，我们只有到系统的Framework里去看看才能真正知道它到底做了什么。<br></p>

<p>为了简单方便，笔者决定逆向iOS库的模拟器版本，开搞，执行命令查看Foundation.framework的位置：</p>

<pre><code>cd /Applications/Xcode-Beta.app/
find . -name Foundation.framework
</code></pre>

<p>得到如下：</p>

<pre><code>./Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/  System/Library/Frameworks/Foundation.framework
</code></pre>

<p>将Foundation.framework拷贝到外面的某个位置，打开<b>Hopper</b>，逆向之。<br></p>

<p>在Hopper中搜索符号<b>initWithBytes:length:encoding:</b>, 发现NSString根本没有这个方法，相反有个没见过的类NSPlaceholerString却实现了这个方法，如图：
<img src="http://canyingwushang.github.io/images/20150118_hopper_NSString.png" title="Optional title" alt="Alt text" /></p>

<p><b>NSPlaceholderString</b>是个什么鬼？ 反正不是一个公开的类。难道NSString的背后是它？
为了验证这个怀疑，笔者决定再打个符号断点，一探究竟。<br>
常规方法：</p>

<pre><code>bmessage -[NSPlaceholderString initWithBytes:length:encoding:]
</code></pre>

<p>输出如下：</p>

<pre><code>Setting a breakpoint at -[NSPlaceholderString initWithBytes:length:encoding:] with  condition (void*)object_getClass((id)$rdi) == 0x000000010bd48f08
Breakpoint 2: where = Foundation`-[NSPlaceholderString initWithBytes:length:encoding:],     address = 0x000000010b9faf1c
</code></pre>

<p>断点设置有效。运行文初的代码看效果，果然断点被fire了。</p>

<h5>结论：NSString方法initWithBytes:length:encoding:的幕后是NSPlaceholderString的同名方法。</h5>

<p>那NSPlaceholderString到底是什么类呢？带着疑问，笔者去stackoverflow提了一个问题，如链接：
<a href="http://stackoverflow.com/questions/27902308/what-is-the-relationship-between-nsstring-and-nsplaceholderstring">What is the relationship between NSString and NSPlaceholderString</a></p>

<p>笔者也有幸得到了期望的答案，如链接：
<a href="http://stackoverflow.com/questions/26607693/how-can-i-implement-the-behaviour-as-in-cluster-pattern-by-apple-nsstring-and-n/26610343#26610343">How can i implement the behaviour as in cluster pattern by apple (NSString and NSCFString)</a></p>

<p>看了上面的链接，总结一下，可以这么理解：
NSString的类方法alloc真正返回的是一个NSPlaceholderString的实例。
alloc的开发文档里有这样的解释：</p>

<pre><code>For historical reasons, alloc invokes allocWithZone:
</code></pre>

<p>调用alloc方法其实是真正调用了allocWithZone：. 那么我们就到Hopper里看看这正的实现。<br>
来看伪代码：</p>

<pre><code>void * +[NSString allocWithZone:](void * self, void * _cmd, struct _NSZone * arg2) {
            eax = self;
            if (**0x2e7260 != eax) {
                eax = _NSAllocateObject(0x0, arg_8);
            }
            else {
                eax = *__placeholder;
                if (eax == 0x0) {
                    [NSPlaceholderString class];
                    eax = _NSAllocateObject(0x0, 0x0);
                    *__placeholder = eax;
                }
            }
            return eax;
        }
</code></pre>

<p>很明显，一目了然。</p>

<p>我们再来看一段代码：</p>

<pre><code>NSString *factory = [NSString alloc];
NSString *theInstance = [factory initWithString:@"I am constant"];
NSLog(@"factory class: %@, instance class: %@", [factory class], [theInstance class]);
</code></pre>

<p>看输出：</p>

<pre><code>factory class: NSPlaceholderString, instance class: __NSCFConstantString
</code></pre>

<h5>分析到这里，我们基本已确定了NSPlaceholderString就是背后的鬼.</h5>

<p>可是苹果为啥要这么做呢？
这里提到了一个概念<b>Class Cluster类簇</b>. Apple对类簇有开发文档里有很详尽的解释。
请各位小伙伴仔细研究文档：<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html">Class Clusters</a>.这里不再獒述.</p>

<p>Posted by 张超  ·&nbsp;&nbsp;Jan 18th, 2015 <br>
原创文章，版权声明：自由转载-非商用-非衍生-保持署名</p>
]]></content>
  </entry>
  
</feed>
